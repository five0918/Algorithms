# 插入排序

通常整理桥牌的方法是一张一张来，并将每一张牌插入到已经有序的牌中的适当位置。在计算机中实现中，为了给要插入的元素腾出空间我们需要将其余所有的元素在插入之前都右移一位。这种算法叫**插入排序**。

与选择排序一样，当前索引左边的所有元素都是有序的，但它们的最终位置还不确定。和选择排序不同，插入排序的所需的时间取决于输入中元素的初始顺序。

>对于随机排列的长度为N且主键不重复的数组，平均情况下插入排序需要N^2/4比较以及N^2/4交换。最坏情况下需要N^2/2次比较和N^2/2次交换，最好情况下需要N-1次比较和0次交换。

插入排序对于实际应用中常见的某些类型的非随机数组很有效。

```java
public class Insert_Sort{

	public static void swap(int[] array,int a,int b){
		int temp=array[a];
		array[a]=array[b];
		array[b]=temp;
	}

	public static void insert_sort(int[] array){
		int N=array.length;
		for (int i=1;i<N;i++) {
			for (int j=i;j>0;j--) {
				if (array[j]<array[j-1]) {
					swap(array,j,j-1);
				}
			}
		}
	}

	public static void main(String[] args) {
		int[] arr={3,44,38,5,47,15,36,26,27,2,46,4,19,50,48};
		System.out.println("排序前:");
		for (int n :arr ) {
			System.out.print(n+" ");
		}
		insert_sort(arr);
		System.out.println("\n排序后:");
		for (int n :arr ) {
			System.out.print(n+" ");
		}
	}
}
```

对于0到N-1之间的每个i，将a[i]与a[0]到a[i-1]中比它小的所有元素依次有序地交换。在索引i由左向右变化的过程中，它左侧的元素总是有序的，所以当i到达数组的右端时排序就完成了。

两两之间交换的过程也就类似于每个元素右移。